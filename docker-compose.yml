version: '3.4'
x-airflow-common:
  &airflow-common
  build:
    context: ./airflow/
    args:
      AIRFLOW_IMAGE: apache/airflow:2.0.2
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKEND: 'airflow.api.auth.backend.basic_auth'
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/log_check:/log_check
    - ./parser/result:/opt/airflow/result
    - ./airflow/logs:/opt/airflow/logs
    - ./airflow/plugins:/opt/airflow/plugins
  networks:
      - kafka-net_airflow
  depends_on:
    - kafka
    - redis
    - postgres_airflow
services:
  db_seg_1:
    image: greenplum:6
    build:
      context: ./greenplum
      dockerfile: ./Dockerfile
    container_name: db_seg_1
    hostname: db_seg_1
    command: tail -f /dev/null
    environment:
      - GP_NODE=segment
    volumes:
      - gpdb1:/var/lib/gpdb/data
    networks:
      - gpdb
  db_seg_2:
    image: greenplum:6
    build:
      context: ./greenplum
      dockerfile: ./Dockerfile
    container_name: db_seg_2
    hostname: db_seg_2
    command: tail -f /dev/null
    environment:
      - GP_NODE=segment
    volumes:
      - gpdb2:/var/lib/gpdb/data
    networks:
      - gpdb
  db_master_1:
    image: greenplum:6
    build:
      context: ./greenplum
      dockerfile: ./Dockerfile
    container_name: db_master_1
    hostname: db_master_1
    command: tail -f /dev/null
    environment:
      - GP_NODE=master
      - HOSTFILE=singlehost
    volumes:
      - gpdb0:/var/lib/gpdb/data
    ports:
      - "5432:5432"
    depends_on:
      - db_seg_1
      - db_seg_2
    links:
      - db_seg_1:seg1
      - db_seg_2:seg2
    networks:
      - gpdb
  dbeaver:
    image: dbeaver/cloudbeaver
    container_name: dbeaver
    ports:
      - "8978:8978"
      - "43119:43119"
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
    networks:
      - kafka-net

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
      - 9092:9092
      - 9093:9093
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      TOPIC_AUTO_CREATE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - kafka-net
      - kafka-net_airflow

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "18080:8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    networks:
      - kafka-net
    depends_on:
      - kafka
      - zookeeper

  spark:
    image: jupyter/pyspark-notebook
    ports:
      - 8888:8888
      - 4040:4040

  postgres_airflow:
    container_name: postgres
    image: postgres:13
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "airflow" ]
      interval: 5s
      retries: 5
    networks:
      - kafka-net_airflow

  redis:
    image: redis:latest
    ports:
      - 6379:6379
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always
    networks:
      - kafka-net_airflow

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - 8080:8080
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8080/health" ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: [ "CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"' ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
  airflow-init:
    <<: *airflow-common
    command: version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
  flower:
    <<: *airflow-common
    command: celery flower
    ports:
      - 5555:5555
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:5555/" ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
  consumer:
    command: python /Consumer.py
    build:
      context: kafka_consumer/
    depends_on:
      - kafka
    env_file:
      - envs/gp.env
    networks:
      - kafka-net
      - gpdb

networks:
  gpdb:
  kafka-net:
    driver: bridge
  kafka-net_airflow:
    driver: bridge

volumes:
  gpdb0:
  gpdb1:
  gpdb2: